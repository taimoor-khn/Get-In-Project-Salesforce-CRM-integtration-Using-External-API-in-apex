//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ResponsewithOrderId {

	public List<Data> data {get;set;} 

	public ResponsewithOrderId(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'ResponsewithOrderId consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Sub_purchases {
		public Integer id {get;set;} 
		public Integer event_id {get;set;} 
		public Object user_id {get;set;} 
		public Integer status {get;set;} 
		public Integer purchase_id {get;set;} 
		public String last_update {get;set;} 
		public Integer purchase_item_id {get;set;} 
		public Integer inviter_id {get;set;} 
		public String first_name {get;set;} 
		public String last_name {get;set;} 
		public String identification_number {get;set;} 
		public String email {get;set;} 
		public String phone {get;set;} 
		public String phone_country_code {get;set;} 
		public String facebook_id {get;set;} 
		public String gender {get;set;} 
		public Object birth_date {get;set;} 
		public String age {get;set;} 
		public String preferred_lang {get;set;} 
		public String custom_inputs {get;set;} 
		public Integer mailing {get;set;} 
		public Integer item_id {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String payment {get;set;} 
		public String refund_amount {get;set;} 
		public String producer_credit {get;set;} 
		public Integer payment_method {get;set;} 
		public Object comment {get;set;} 
		public String hash {get;set;} 
		public String supplier {get;set;} 
		public Integer enter {get;set;} 
		public Integer anonymous_user {get;set;} 

		public Sub_purchases(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'event_id') {
							event_id = parser.getIntegerValue();
						} else if (text == 'user_id') {
							user_id = parser.readValueAs(Object.class);
						} else if (text == 'status') {
							status = parser.getIntegerValue();
						} else if (text == 'purchase_id') {
							purchase_id = parser.getIntegerValue();
						} else if (text == 'last_update') {
							last_update = parser.getText();
						} else if (text == 'purchase_item_id') {
							purchase_item_id = parser.getIntegerValue();
						} else if (text == 'inviter_id') {
							inviter_id = parser.getIntegerValue();
						} else if (text == 'first_name') {
							first_name = parser.getText();
						} else if (text == 'last_name') {
							last_name = parser.getText();
						} else if (text == 'identification_number') {
							identification_number = parser.getText();
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'phone') {
							phone = parser.getText();
						} else if (text == 'phone_country_code') {
							phone_country_code = parser.getText();
						} else if (text == 'facebook_id') {
							facebook_id = parser.getText();
						} else if (text == 'gender') {
							gender = parser.getText();
						} else if (text == 'birth_date') {
							birth_date = parser.readValueAs(Object.class);
						} else if (text == 'age') {
							age = parser.getText();
						} else if (text == 'preferred_lang') {
							preferred_lang = parser.getText();
						} else if (text == 'custom_inputs') {
							custom_inputs = parser.getText();
						} else if (text == 'mailing') {
							mailing = parser.getIntegerValue();
						} else if (text == 'item_id') {
							item_id = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'payment') {
							payment = parser.getText();
						} else if (text == 'refund_amount') {
							refund_amount = parser.getText();
						} else if (text == 'producer_credit') {
							producer_credit = parser.getText();
						} else if (text == 'payment_method') {
							payment_method = parser.getIntegerValue();
						} else if (text == 'comment') {
							comment = parser.readValueAs(Object.class);
						} else if (text == 'hash') {
							hash = parser.getText();
						} else if (text == 'supplier') {
							supplier = parser.getText();
						} else if (text == 'enter') {
							enter = parser.getIntegerValue();
						} else if (text == 'anonymous_user') {
							anonymous_user = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Sub_purchases consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public Integer id {get;set;} 
		public Integer event_id {get;set;} 
		public Integer user_id {get;set;} 
		public Integer status {get;set;} 
		public Integer purchase_id {get;set;} 
		public String last_update {get;set;} 
		public Integer purchase_item_id {get;set;} 
		public Object inviter_id {get;set;} 
		public String first_name {get;set;} 
		public String last_name {get;set;} 
		public String identification_number {get;set;} 
		public String email {get;set;} 
		public String phone {get;set;} 
		public String phone_country_code {get;set;} 
		public String facebook_id {get;set;} 
		public String gender {get;set;} 
		public Object birth_date {get;set;} 
		public String age {get;set;} 
		public String preferred_lang {get;set;} 
		public String custom_inputs {get;set;} 
		public Integer mailing {get;set;} 
		public Integer item_id {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String payment {get;set;} 
		public String refund_amount {get;set;} 
		public String producer_credit {get;set;} 
		public Integer payment_method {get;set;} 
		public Object comment {get;set;} 
		public String hash {get;set;} 
		public String supplier {get;set;} 
		public Integer enter {get;set;} 
		public Integer anonymous_user {get;set;} 
		public List<Sub_purchases> sub_purchases {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'event_id') {
							event_id = parser.getIntegerValue();
						} else if (text == 'user_id') {
							user_id = parser.getIntegerValue();
						} else if (text == 'status') {
							status = parser.getIntegerValue();
						} else if (text == 'purchase_id') {
							purchase_id = parser.getIntegerValue();
						} else if (text == 'last_update') {
							last_update = parser.getText();
						} else if (text == 'purchase_item_id') {
							purchase_item_id = parser.getIntegerValue();
						} else if (text == 'inviter_id') {
							inviter_id = parser.readValueAs(Object.class);
						} else if (text == 'first_name') {
							first_name = parser.getText();
						} else if (text == 'last_name') {
							last_name = parser.getText();
						} else if (text == 'identification_number') {
							identification_number = parser.getText();
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'phone') {
							phone = parser.getText();
						} else if (text == 'phone_country_code') {
							phone_country_code = parser.getText();
						} else if (text == 'facebook_id') {
							facebook_id = parser.getText();
						} else if (text == 'gender') {
							gender = parser.getText();
						} else if (text == 'birth_date') {
							birth_date = parser.readValueAs(Object.class);
						} else if (text == 'age') {
							age = parser.getText();
						} else if (text == 'preferred_lang') {
							preferred_lang = parser.getText();
						} else if (text == 'custom_inputs') {
							custom_inputs = parser.getText();
						} else if (text == 'mailing') {
							mailing = parser.getIntegerValue();
						} else if (text == 'item_id') {
							item_id = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'payment') {
							payment = parser.getText();
						} else if (text == 'refund_amount') {
							refund_amount = parser.getText();
						} else if (text == 'producer_credit') {
							producer_credit = parser.getText();
						} else if (text == 'payment_method') {
							payment_method = parser.getIntegerValue();
						} else if (text == 'comment') {
							comment = parser.readValueAs(Object.class);
						} else if (text == 'hash') {
							hash = parser.getText();
						} else if (text == 'supplier') {
							supplier = parser.getText();
						} else if (text == 'enter') {
							enter = parser.getIntegerValue();
						} else if (text == 'anonymous_user') {
							anonymous_user = parser.getIntegerValue();
						} else if (text == 'sub_purchases') {
							sub_purchases = arrayOfSub_purchases(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static ResponsewithOrderId parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new ResponsewithOrderId(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }




    private static List<Sub_purchases> arrayOfSub_purchases(System.JSONParser p) {
        List<Sub_purchases> res = new List<Sub_purchases>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Sub_purchases(p));
        }
        return res;
    }



}